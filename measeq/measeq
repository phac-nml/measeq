#!/bin/bash
set -o pipefail

### Set Global variables ###
############################
SCRIPTS_DIR="$CONDA_PREFIX/lib/measeq/scripts"
DATA_DIR="$CONDA_PREFIX/lib/measeq/reference_data"
NEXTCLADE_DATASET="$DATA_DIR/nextclade_dataset"
CONFIG="$SCRIPTS_DIR/measles_parameters.config"
LOG_FILE=""
VERSION="0.1.0"

# Define color codes
RESET="\e[0m"
RED="\e[31m"
BLUE="\e[34m"
YELLOW="\e[33m"

### Set Help Statements ###
###########################
# General help statement
HELP="\n
MeaSeq: Measles Sequencing Analysis Tool\n
===============================================================================\n
\e[32mUSAGE: measeq mode [argument1] [argument2] ...\e[0m\n\n

\e[32mMODES:\e[0m\n
    full (default)                      : run the full pipeline including viralrecon\n
    report                              : run only measeq analyses with an existing viralrecon directory\n\n

\e[32mOPTIONAL:\e[0m\n
    -v | --version                      : Outputs the version and exits\n
    -h | --help                         : Prints the help statement and exits\n
"

# Report mode help statement
HELP_REPORT="\n
MeaSeq: Measles Sequencing Analysis Tool\n
===============================================================================\n
\e[32mUSAGE: measeq report -vr <VIRALRECON RESULTS DIRECTORY> -r <REF>\e[0m\n\n

\e[32mREQUIRED:\e[0m\n
\e[34m (Reference FASTA is required to match the same reference used for viralrecon.)\n\e[0m
    -r | --reference <FILE>             : Path to FASTA file to use as reference.\n
    -vr| --viralrecon <DIR>             : Path to the results directory of viralrecon.\n\n

\e[32mOPTIONAL:\e[0m\n
    -o | --output <OUTDIR>              : Output directory name/path to write results to. Default: './measeq_run_STRAIN_DATE+TIME'\n
    -c | --cpus <NUMBER>                : The number of CPUs to be used for downstream parallel processing. Default: 4\n 
    --name <NAME>                       : Name of the lab or organizaton running MeaSeq.\n
    --email <MAIL@ORG.COM>              : Email of the lab or organizaton running MeaSeq.\n
    --phone <123 456 7890>              : Phone Number of the lab or organizaton running MeaSeq.\n
    --website <WWW.EXAMPLE.COM>         : Website of the lab or organizaton running MeaSeq.\n\n

\e[32mVERSION:\e[0m\n
    -v | --version                      : Outputs the version and exits\n\n

\e[32mDEBUG:\e[0m\n
    --debug                             : Debug mode prints more information to command line\n
"

# Full mode help statement
HELP_FULL="\n
MeaSeq: Measles Sequencing Analysis Tool\n
===============================================================================\n
\e[32mUSAGE: measeq -f <FASTQ DIRECTORY> -p <PROFILE> [ -s <STRAIN> || -r <REF> -g <GFF> ]\e[0m\n\n

\e[32mRequired:\e[0m\n
    -f | --fastq <INDIR>                : Path to directory containing fastq or fastq.gz files\n
    -p | --profile <PROFILE>            : Dependency manager for viralrecon. Specify one of (conda|mamba|docker|singularity).\n\n

\e[32mReference Data:\e[0m\n
\e[34m (Select either an included reference --strain OR provide a reference --fasta and --gff file)\e[0m\n
    -s | --strain <B3|D4|D8|H1>         : Specify which measles strain to use as reference\n
    -r | --reference <FILE>             : Path to FASTA file to use as reference\n
    -g | --gff <FILE>                   : Path to .gff file containing the reference's annotations\n\n


\e[32mOPTIONAL:\e[0m\n
    -o | --output <OUTDIR>              : Output directory name/path to write results to. Default: './measeq_run_STRAIN_DATE+TIME'\n
    -c | --cpus <NUMBER>                : The number of CPUs to be used for downstream parallel processing. Default: 4\n 
    --name <NAME>                       : Name of the lab or organizaton running MeaSeq.\n
    --email <MAIL@ORG.COM>              : Email of the lab or organizaton running MeaSeq.\n
    --phone <123 456 7890>              : Phone Number of the lab or organizaton running MeaSeq.\n
    --website <WWW.EXAMPLE.COM>         : Website of the lab or organizaton running MeaSeq.\n\n

\e[32mVERSION:\e[0m\n
    -v | --version                      : Outputs the version and exits\n\n

\e[32mDEBUG:\e[0m\n
    --debug                             : Debug mode prints more information to command line\n
"

### Set Values and check mode validity ###
##########################################
# Default values
strain=""
fastq_dir=""
output_dir=""
reference=""
gff=""
name=""
email=""
phone=""
website=""
results="results_viralrecon"
viralrecon=false
profile=""
profile_options=("conda" "mamba" "docker" "singularity" "apptainer")
config_file=""
max_jobs=4

### Functions ###
#################
# Create log levels and define default
declare -A levels=( [DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3 [CRITICAL]=4 )
script_logging_level="INFO"
# Logging function
logging() {
    local log_level=$1
    local message=$2

    # Check if level exists
    if [[ ! ${levels[$log_level]} ]]; then
        echo "ERROR: Log level $log_level called on line ${BASH_LINENO[0]} does not exist"
        exit 1
    fi

    # Check if log level given should output message based on script level, else return
    (( ${levels[$log_level]} < ${levels[$script_logging_level]} )) && return 0

    # Log to CL
    if [[ $log_level == "INFO" ]]; then
        echo -e "$(date +'%Y-%m-%d %T') ${BLUE}${log_level}: ${message}${RESET}"
    elif [[ $log_level == "WARN" ]]; then
        echo -e "$(date +'%Y-%m-%d %T') ${YELLOW}${log_level}: ${message}${RESET}"
    elif [[ $log_level == "ERROR" || $log_level == "CRITICAL" ]]; then
        echo -e "$(date +'%Y-%m-%d %T') ${RED}${log_level}: ${message}${RESET}"
    fi

    # Write to log file separately if it exists
    #  Due to avoiding having the colour codes in it
    if [[ -f $LOG_FILE ]]; then
        echo -e "$(date +'%Y-%m-%d %T') ${log_level}: ${message}" | tee -a "$LOG_FILE" > /dev/null
    fi

    # Exit on error
    [[ "$log_level" == "ERROR" || "$log_level" == "CRITICAL" ]] && exit 1
    return 0
}

# Validate that input is a directory
valid_dir() {
    if [ ! -d "$2" ]; then
        logging "ERROR" "Given input '$2' for arg '$1' is not a valid directory"
    fi
    return 0
}

# Validate that input is a file
valid_file() {
    if [ ! -f "$2" ]; then
        logging "ERROR" "Given input '$2' for arg '$1' is not a valid file"
    fi
    return 0
}

# Check that ViralRecon output exists
viralrecon_check() {
    local viralrecon_check_dir=$1
    
    # Directory check
    if [ ! -d $viralrecon_check_dir/variants/ivar/ -o ! -d $viralrecon_check_dir/variants/ivar/consensus/ivar/ ]; then
        logging "ERROR" " Output variant and consensus directories don't exist, something went wrong earlier in the pipeline!" 
    # VCF
    elif ! ls $viralrecon_check_dir/variants/ivar/ | grep -q '.vcf.gz'; then
        logging "ERROR" " No VCF files found, something went wrong earlier in the pipeline!" 
    # Consensus
    elif ! ls $viralrecon_check_dir/variants/ivar/consensus/ivar/ | grep -q '.consensus.fa'; then
        logging "ERROR" " No consensus FASTA files found, something went wrong earlier in the pipeline!" 
    # MultiQC file
    elif [ ! -f $viralrecon_check_dir/multiqc/summary_variants_metrics_mqc.csv ]; then
        logging "ERROR" " No summary metrics file created, something went wrong earlier in the pipeline!" 
    fi
    return 0
}

# Function to run nextclade and generate .bed file
# Run nextclade to find the strain of the virus
strain_check() { 
    nextclade run \
        -d nextstrain/measles/N450/WHO-2012 \
        --output-tsv=nextclade.tsv \
    $reference > /dev/null 2>&1
    strain=$(tail -n +2 nextclade.tsv | cut -f3)
    rm nextclade.tsv

    # Create .bed file and proceed to analysis
    echo -e "$(basename "$reference" | sed 's/\.[^.]*$//')\t0\t$(grep -v '^>' "$reference" | tr -d '\n' | wc -c)" > "reference.bed"
    gen_bed="reference.bed" 
    return 0
}

# Function to standardize website input
standard_website() {
    local website="$1"
    # Remove non-domain components
    website="${website#http://}"
    website="${website#https://}"
    website="${website#www.}"

    # Echo the new variable
    echo "https://www.${website}"
}

### Start of Pipeline - Set Mode ###
####################################
if [[ "$1" == -* ]]; then
    mode="full"
elif [[ -z "$1" ]]; then
    mode=""
else
    mode="$1"
    shift
fi

# Exit with help statement for both modes
if [ "$#" -eq 0 ]; then
    if [[ -z $mode ]]; then
        echo -e $HELP
    elif [[ "$mode" == "full" ]]; then
        echo -e $HELP_FULL
    else
        echo -e $HELP_REPORT
    fi
    exit 0
fi

# Check if mode is valid
if [[ "$mode" != "report" && "$mode" != "full" ]]; then
    logging "ERROR" "Invalid mode '$mode'. Use 'full' (default) or 'report'"
fi

### Arg Parsing and Validation ###
##################################
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--fastqs)
            valid_dir "$1" "$2"
            fastq_dir=$(realpath "$2")
            shift 2
            ;;
        -s|--strain)
            strain="$2"
            shift 2
            ;;
        -vr|--viralrecon)
            valid_dir "$1" "$2"
            viralrecon_dir=$(realpath "$2")
            shift 2
            ;;
        -o|--output)
            output_dir="$2"
            shift 2
            ;;
        -r|--reference)
            valid_file "$1" "$2"
            reference=$(realpath "$2")
            shift 2
            ;;
        -g|--gff)
            valid_file "$1" "$2"
            gff=$(realpath "$2")
            shift 2
            ;;
        -p|--profile)
            profile="$2"
            if [[ ! -z "$profile" ]]; then
                if [[ "${profile_options[@]}" =~ "$profile" ]]; then
                    logging "INFO" "Profile: $profile"
                else
                    logging "ERROR" "Invalid option for --profile. Please specify one of the following (conda|mamba|docker|singularity)"
                fi
            else 
                logging "ERROR" "No profile provided with --profile. Please specify one of the following (conda|mamba|docker|singularity)"
            fi
            shift 2
            ;;
        --config)
            valid_file "$1" "$2"
            config_file=$(realpath "$2")
            if [[ -f "$config_file" && "$config_file" == *.config ]]; then
                logging "INFO" "Config file check done"
                CONFIG="$SCRIPTS_DIR/measles_parameters.config,$config_file"
            else
                logging "ERROR" "Supplied configuration file either doesn't exist or is not a .config file. Please recheck and rerun the pipeline"
            fi
            shift 2
            ;;
        --name)
            shift
            while [[ $# -gt 0 && ! "$1" =~ ^- ]]; do
                name="${name:+$name }$1"
                shift
            done
            ;;
        --email)
            email="$2"
            shift 2
            ;;
        --phone)
            shift
            while [[ $# -gt 0 && ! "$1" =~ ^- ]]; do
                phone="${phone:+$phone }$1"
                shift
            done
            ;;
        --website)
            website=$(standard_website $2)
            shift 2
            ;;
        -c|--cpus)
            max_jobs="$2"
            if [[ $max_jobs =~ ^[0-9]+$ ]]; then
                shift 2
            else 
                logging "ERROR" "Invalid number of CPUs. Please use a positive integer with -c | --cpus."
                exit 0
            fi
            ;;
        -h|--help)
            if [[ "$mode" == "full" ]]; then
                echo -e $HELP_FULL
                exit 0
            elif [[ "$mode" == "report" ]]; then
                echo -e $HELP_REPORT
                exit 0
            fi
            ;;
        -v|--version)
            echo -e "Measeq: v$VERSION"
            exit 0
            ;;
        --debug)
            script_logging_level="DEBUG"
            logging "DEBUG" "Debug Active"
            shift 1
            ;;
        *)
            logging "ERROR" "Unknown option detected ($1)"
            ;;
    esac
done

### Validate mode of running ###
################################
if [[ "$mode" == "full" ]]; then
    # Exit if profile is not provided
    if [[ -z "$profile" ]]; then
        logging "ERROR" "No profile provided with -p | --profile <PROFILE>. Please specify one of the following (conda|mamba|docker|singularity)"
    # Exiting if fastq directory is not provided.
    elif [[ ! -n "$fastq_dir" ]] && [[ "$viralrecon" = false ]]; then
        logging "ERROR" "Fastq file directory not found. Double check the '-f | --fastqs' input" 
    fi

    # Strain checking
    # Checking if the pipeline is using saved strains or user provided reference 
    if [[ -f $reference ]] && [[ -f $gff ]]; then
        logging "INFO" "Reference & Annotation file detected"
        # Set setting to "1" to perform strain check
        setting=1
    # Set reference based on strain 
    elif [ "$strain" != "" ]; then 
        # Modifying strain input to uppercase
        strain=$(echo "$strain" | tr '[:lower:]' '[:upper:]')
        # Setting Strain of Measles
        if [ "$strain" == "B3" ]; then
            reference="$DATA_DIR/B3/MK513622.1.reference.fasta"
            gff="$DATA_DIR/B3/MK513622.1.gff"
            gen_bed="$DATA_DIR/B3/MK513622.1.bed"
        elif [ "$strain" == "D8" ]; then
            reference="$DATA_DIR/D8/MH356245.1.reference.fasta"
            gff="$DATA_DIR/D8/MH356245.1.gff"
            gen_bed="$DATA_DIR/D8/MH356245.1.bed"
        elif [ "$strain" == "H1" ]; then
            reference="$DATA_DIR/H1/MZ483907.1.reference.fasta"
            gff="$DATA_DIR/H1/MZ483907.1.gff"
            gen_bed="$DATA_DIR/H1/MZ483907.1.bed"
        elif [ "$strain" == "D4" ]; then
            reference="$DATA_DIR/D4/OK424844.1.reference.fasta"
            gff="$DATA_DIR/D4/OK424844.1.gff"
            gen_bed="$DATA_DIR/D4/OK424844.1.bed"
        fi
    else
        logging "ERROR" "Please provide the reference data using -r <REFERENCE FASTA> and -g <ANNOTATION FILE> or specify a strain using -s <STRAIN>" 
    fi

elif [[ "$mode" == "report" ]]; then
    if [[ -f $reference ]] && [[ -d $viralrecon_dir ]]; then
        logging "INFO" "Running MeaSeq with existing ViralRecon directory" 
        # Check if needed viralrecon outputs are available
        viralrecon_check $viralrecon_dir
        # Set setting to "2" to copy directory and perform strain check
        setting=2
        # Variable to skip ViralRecon
        viralrecon=true
    else
        logging "ERROR" "Please provide the reference data using -r <REFERENCE FASTA> and results directory of the existing viralrecon output using -vr <DIRECTORY>" 
    fi
fi

### Set Up Outputs ###
######################
# Set output directory and run from it
if [ -z "$output_dir" ]; then
    if [[ ! -z "$strain" ]]; then
        output_dir="measeq_run_${strain}_$(date +'%Y_%m_%d_%H_%M')"
    else
        output_dir="measeq_run_$(date +'%Y_%m_%d_%H_%M')"
    fi
fi

mkdir -m 775 -p $output_dir
cd $output_dir
logging "DEBUG" "Created and entered outdir: $output_dir"

# Log file
LOG_FILE="$PWD/measeq.log"
touch $LOG_FILE

# Perform strain check, if needed
if [[ $setting -eq 1 ]]; then
    # Run Nextclade and output .bed file
    strain_check
elif [[ $setting -eq 2 ]]; then
    # Copy ViralRecon Results directory
    cp -r $viralrecon_dir ./$results
    # Run Nextclade and output .bed file
    strain_check
fi 

# Identify strain of the provided reference
if [[ -z "$strain" ]]; then
    logging "WARN" "The reference strain could not be identified using nextclade. Continuing with ambigious strain" 
else
    logging "INFO" "Strain detected as: $strain" 
fi

# Logging
logging "DEBUG" "Data set as follows:"
logging "DEBUG" " Reference Seq: $reference"
logging "DEBUG" " GFF File: $gff"
logging "DEBUG" " Genome Bed: $gen_bed"
logging "DEBUG" " Nextclade Dataset: $nextclade_dataset"

logging "INFO" "Strain set to $strain, all data pathes set, ready to run" 

### Starting Analysis ###
#########################
# Check for if any unzipped fastq files
if [ $viralrecon == false ]; then
    if `ls $fastq_dir | grep -q -e "\.fastq$" -e "\.fq$"`; then
        logging "INFO" "Gzipping fastq files in $fastq_dir" 
        logging "INFO" " ~This may take some time please wait~" 
        gzip $fastq_dir/*.f*q
    elif `ls $fastq_dir | grep -q -e "\.fastq.gz$" -e "\.fq.gz$"`; then
        :
    else
        logging "ERROR" "No fastqs files found in $fastq_dir" 
    fi

    # Make samplesheet
    logging "INFO" "Making samplesheet from samples" 
    echo "sample,fastq_1,fastq_2" > samplesheet.csv

    for file in $fastq_dir/*.f*q.gz ; do
        # Paired data
        #  Looking for _R1 to pair up paired end data
        if echo $file | grep -q -e '_R1.*\.fastq\.gz' -e '_R1.*\.fq\.gz'; then
            sample=$(basename "$file" | sed -E 's/_R[12]//; s/_S[0-9]+//g; s/_L[0-9]+//g; s/_[0-9]+//g; s/\.fastq\.gz$//; s/\.fq\.gz$//')
            file_r2=${file/_R1/_R2}
            echo "${sample},${file},${file_r2}" >> samplesheet.csv
            logging "DEBUG" " Added paired-end Sample: $sample: $file,$file_r2"
        # Skip R2 as its already been done
        elif echo $file | grep -q -e '_R2.*\.fastq\.gz' -e '_R2.*\.fq\.gz'; then
            :
        # Single data
        #  If it doesn't have an _R1/_R2 we want to pull it out as single
        elif echo $file | grep -q -e '\.fastq\.gz' -e '\.fq\.gz'; then
            sample=$(basename "$file" | sed -E 's/_S[0-9]+//g; s/_L[0-9]+//g; s/_[0-9]+//g; s/\.fastq\.gz$//; s/\.fq\.gz$//')
            echo "${sample},${file}," >> samplesheet.csv
            logging "DEBUG" " Added single-end Sample: $sample: $file"
        else
            logging "WARN" "FASTQ file '$file' was not detected as either single or paired-end" 
        fi
    done

    # Get the name of all samples
    samples=()
    while IFS=',' read -r sample fq1 fq2; do
        samples+=("$sample")
    done < <(tail -n +2 samplesheet.csv)
    sample_list=$(echo ${samples[@]})
    logging "DEBUG" "Sample list created containing: $sample_list"

    ### Viral Recon Pipeline ###
    ############################\
    logging "INFO" "Starting ViralRecon Pipeline" 
    logging "INFO" " All nextflow log info can be found in the 'nf-viralrecon.log' file" 
    logging "INFO" " It may take some time to run the pipeline. The nf-viralrecon.log file will tell you where it is currently at" 
    nextflow run nf-core/viralrecon \
        -profile $profile \
        -c $CONFIG \
        --input samplesheet.csv \
        --gff $gff \
        --outdir $results \
        --platform illumina \
        --protocol metagenomic \
        --fasta $reference \
        --variant_caller ivar \
        --consensus_caller ivar \
        --nextclade_dataset_name 'nextstrain/measles/N450/WHO-2012' \
        --nextclade_dataset_tag '2024-06-07--06-48-19Z' \
        --skip_kraken2 \
        --skip_asciigenome \
        --skip_assembly \
        --skip_pangolin \
        --skip_picard_metrics \
        >> nf-viralrecon.log 2>&1

    logging "INFO" "Finished ViralRecon Pipeline" 

    # If no outputs we exit here instead of causing confusion
    # See if directories exist (if not we likely had nothing wrong)
    viralrecon_check $results
fi

### Postprocessing ###
######################
logging "INFO" "Starting MeaSeq Report Processing" 

# For shared systems just want to make the reference index once
if [ ! -f "${reference}.fai" ]; then
    samtools faidx "$reference"
fi

# Create intermediate files from the pileups
logging "INFO" " Creating intermediate files from pileups and VCFs" 
mkdir -m 775 -p results_measeq
mkdir -m 775 -p results_measeq/position_depth
mkdir -m 775 -p results_measeq/position_n_density
mkdir -m 775 -p results_measeq/position_quality
mkdir -m 775 -p results_measeq/all_variation_positions
echo -e "Sample\tgenome_length\tdivisible" > results_measeq/genome_lengths.txt


for bam_file in $results/variants/bowtie2/*.sorted.bam; do
    (
    # Get the name
    sample_name=$(basename ${bam_file%.sorted.bam})
    logging "INFO" "  Processing $sample_name" 

    # Sample Variation
    logging "DEBUG" "   Running Variation Script"
    $SCRIPTS_DIR/calc_bam_variation.py \
        --bam $bam_file \
        --reference $reference \
        --sample $sample_name
    
    if [ -f ${sample_name}_variation.csv ]; then
        mv ${sample_name}_variation.csv results_measeq/all_variation_positions/
    fi

    # Per base depth
    logging "DEBUG" "   Running Bedtools Coverage"
    echo -e "reference_name\tstart\tend\tposition\tdepth" \
        > results_measeq/position_depth/${sample_name}_per_base_coverage.bed
    bedtools coverage \
        -d \
        -a $gen_bed \
        -b $bam_file \
        >> results_measeq/position_depth/${sample_name}_per_base_coverage.bed

    # Per base baseQ
    logging "DEBUG" "   Running Pysamstats baseq"
    pysamstats \
        --type baseq \
        -d $bam_file \
        > results_measeq/position_quality/${sample_name}_qbase.txt

    # Per base N count
    logging "DEBUG" "   Running Samtools and AWK Per-base N Count"
    samtools mpileup \
        -f $reference \
        $bam_file \
        > $results/variants/bowtie2/${sample_name}_output.pileup 2>>$LOG_FILE
    echo -e "position\tN_density" \
        > results_measeq/position_n_density/${sample_name}_per_base_n_content.txt
    awk '{count = gsub("N", "N"); print $2 "\t" count}' \
        $results/variants/bowtie2/${sample_name}_output.pileup \
        >> results_measeq/position_n_density/${sample_name}_per_base_n_content.txt
    
    # Genome Length
    consensus="$results/variants/ivar/consensus/ivar/${sample_name}.consensus.fa"
    logging "DEBUG" "    Sample: $sample_name is using consensus: $consensus"

    # No consensus made, skip ahead and track
    if [ ! -f "$consensus" ]; then
        logging "WARN" " Sample $sample_name had no sample consensus generated" 
        echo -e "$sample_name\t0\tno" >> results_measeq/genome_lengths.txt
        continue
    fi

    # If consensus, reformat first line and check divisibility
    sed -i "1c\>$sample_name" $consensus
    genome_count=$(tail -n +2 "$consensus" | tr -d '\n' |wc -c)
    if [ ! "$genome_count" -eq 0 ]; then
        if ((genome_count % 6 == 0 )); then
            echo -e "$sample_name\t$genome_count\tYes" >> results_measeq/genome_lengths.txt
        else
            echo -e "$sample_name\t$genome_count\tNo" >> results_measeq/genome_lengths.txt
        fi
    else
        logging "WARN" "  Sample "$sample" : Genome is 0BPs long" 
        echo -e "$sample\t0\tYes" >> results_measeq/genome_lengths.txt
    fi
    ) &

    # Run maximum number of parallel jobs at a time
    while [ "$(jobs -p | wc -l)" -ge "$max_jobs" ]; do
        sleep 1
    done

done
wait 

### Identify INDELS ###
################
logging "INFO" " Creating INDELs file" 
Rscript $SCRIPTS_DIR/identify_indels.R \
    $PWD \
    $results \
    >> $LOG_FILE 2>&1

if [ -f $results/variants/ivar/indels.csv ]; then
    mkdir -m 775 -p indels
    mv $results/variants/ivar/indels.csv indels
    mv indels results_measeq
fi

### Nextclade with Custom Dataset ###
#####################################
logging "INFO" " Running Nextclade" 
mkdir -m 775 -p results_measeq/nextclade

# Cat sequences together to run nextclade
cat $results/variants/ivar/consensus/ivar/*.consensus.fa > results_measeq/nextclade/all_sequences.fasta

# Run nextclade
nextclade run \
    --input-dataset $NEXTCLADE_DATASET \
    --output-all results_measeq/nextclade \
    results_measeq/nextclade/all_sequences.fasta

### Organize Outputs ###
########################
logging "INFO" " Organizing final data" 
# Consensus
mkdir -m 775 -p results_measeq/consensus_files
ln -s $PWD/$results/variants/ivar/consensus/ivar/*.consensus.fa results_measeq/consensus_files

# Variant VCFs
mkdir -m 775 -p results_measeq/vcf_files
ln -s $PWD/$results/variants/ivar/*.vcf* results_measeq/vcf_files

# BAMs
mkdir -m 775 -p results_measeq/bam_bai_files
ln -s $PWD/$results/variants/bowtie2/*.bam* results_measeq/bam_bai_files

### Create Final Run Report ###
###############################
logging "INFO" " Writing final report"
cp $SCRIPTS_DIR/*.Rmd $SCRIPTS_DIR/phac.svg .
Rscript -e "rmarkdown::render('MeaSeq_Report.Rmd', params = list(workdir = '$PWD', strain = '$strain', name = '$name', phone = '$phone', email = '$email', website = '$website'))" \
    >> $LOG_FILE 2>&1

# Move finished data around
if [[ ! -d work ]]; then
    mkdir -m 775 -p work
fi
mv phac.svg *.Rmd work/
if [ -d .nextflow ]; then
    mv .nextflow work
fi
if [ -f reference.bed ]; then
    mv reference.bed work
fi
mkdir -m 775 -p log_files
logging "INFO" "Done" 
if [[ -f .nextflow.log ]]; then
    mv .nextflow.log *.log log_files
else
    mv *.log log_files
fi 
